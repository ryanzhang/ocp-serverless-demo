quarkus.devservices.enabled=false
%dev.quarkus.http.port=8081
# configure the MongoDB client for a replica set of two nodes
quarkus.mongodb.connection-string = mongodb://127.0.0.1:27017/?retryWrites=false
# mandatory if you don't specify the name of the database using @MongoEntity
quarkus.mongodb.database = album

#CORS setting
quarkus.http.cors=true
%dev.quarkus.http.cors.origins=http://localhost:5173
quarkus.http.cors.origins=http://to-be-defined
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=*
quarkus.http.cors.access-control-allow-credentials=true

# initial data
initial_data_onstart=false

# kafka config
%prod.kafka.bootstrap.servers=production-bootstrap:9092
%dev.kafka.bootstrap.servers=kafka.galaxy:9092
mp.messaging.incoming.analyze-image-topic.connector=smallrye-kafka
mp.messaging.incoming.analyze-image-topic.topic=analyze-image-event
mp.messaging.incoming.analyze-image-topic.auto.offset.reset=latest
mp.messaging.incoming.analyze-image-topic.group.id=album-service-consumer

mp.messaging.outgoing.save-image-meta-complete-topic.connector=smallrye-kafka
mp.messaging.outgoing.save-image-meta-complete-topic.topic=album-service-event
mp.messaging.outgoing.save-image-meta-complete-topic.auto.offset.reset=latest
mp.messaging.outgoing.save-image-meta-complete-topic.group.id=album-service-producer
